{"version":3,"sources":["views/ProfileCreation/UserName.tsx","views/ProfileCreation/config.ts","views/ProfileCreation/contexts/ProfileCreationProvider.tsx","views/ProfileCreation/Header.tsx","views/ProfileCreation/WalletNotConnected.tsx","views/ProfileCreation/NextStepButton.tsx","views/ProfileCreation/contexts/hook.ts","views/ProfileCreation/Mint.tsx","views/ProfileCreation/ProfilePicture.tsx","views/ProfileCreation/TeamSelection.tsx","utils/fetchWithTimeout.ts","views/ProfileCreation/ConfirmProfileCreationModal.tsx","views/ProfileCreation/Steps.tsx","views/ProfileCreation/index.tsx","state/nftMarket/hooks.ts","hooks/useApproveConfirmTransaction.tsx","components/ApproveConfirmButtons.tsx","state/teams/hooks.ts","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx"],"names":["ExistingUserState","MINT_COST","parseUnits","REGISTER_COST","STARTER_NFT_BUNNY_IDS","totalCost","add","allowance","mul","initialState","isInitialized","currentStep","teamId","selectedNft","collectionAddress","tokenId","userName","minimumCakeRequired","reducer","state","action","type","step","ProfileCreationContext","createContext","ProfileCreationProvider","children","useReducer","dispatch","account","useWeb3React","useEffect","isSubscribed","a","bunnyFactoryContract","getBunnyFactoryContract","canMint","fetchData","actions","useMemo","nextStep","setTeamId","setSelectedNft","setUserName","Provider","value","Wrapper","styled","div","theme","colors","textSubtle","steps","Header","t","useTranslation","useContext","as","scale","color","mb","id","href","nftsBaseUrl","variant","map","translationKey","index","WalletNotConnected","ConnectWalletButton","NextStepButton","props","endIcon","useProfileCreation","Mint","useState","selectedBunnyId","setSelectedBunnyId","starterNfts","setStarterNfts","collections","useGetCollections","toastSuccess","useToast","useAppDispatch","cakeContract","useCake","useBunnyFactory","useGetCakeBalance","cakeBalance","balance","hasMinimumCakeRequired","fetchStatus","FetchStatus","Fetched","gte","callWithGasPrice","useCallWithGasPrice","getStarterNfts","getNftsFromCollectionApi","pancakeBunniesAddress","allPbTokens","data","nfts","bunnyId","length","useApproveConfirmTransaction","onRequiresApproval","address","response","onApprove","toString","onConfirm","onApproveSuccess","onSuccess","fetchUserNfts","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","fontSize","bold","num","formatUnits","nft","SelectionCard","name","image","thumbnail","isChecked","onChange","disabled","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","onClick","Link","RouterLink","primary","NftWrapper","ProfilePicture","library","setIsApproved","setIsApproving","userProfileCreationNfts","setUserProfileCreationNfts","profileContract","useProfileContract","useUserNfts","userNftsInitializationState","fetchUserPancakeCollectibles","nftsByCollection","Array","from","reduce","acc","Set","NFT_ROLE","nftRole","collectionsNftRoleCalls","params","multicall","profileABI","collectionRolesRaw","collectionRoles","flat","filter","indexOf","console","error","UserNftInitializationState","INITIALIZED","toastError","contract","getErc721Contract","getSigner","getPancakeProfileAddress","tx","Toast","txHash","hash","wait","status","to","style","marginLeft","walletNft","location","NftLocation","WALLET","width","height","isLoading","spin","undefined","Team","currentTeamId","teams","useTeams","handleTeamSelection","parseInt","teamValues","shuffle","Object","values","team","images","md","isJoinable","mr","users","toLocaleString","fetchWithTimeout","url","options","timeout","fetchOptions","Promise","race","fetch","_","reject","setTimeout","Error","ConfirmProfileCreationModal","onDismiss","toJSON","receipt","fetchProfile","transactionHash","title","justifyContent","InputWrap","Input","UIKitInput","Indicator","Flex","UserName","isAcknowledged","setIsAcknowledged","useWeb3Provider","connector","IDLE","existingUserState","setExistingUserState","isValid","setIsValid","setIsLoading","message","setMessage","fetchAbortSignal","useRef","useModal","onPresentConfirmProfileCreation","isUserCreated","CREATED","usernameToCheck","setUsernameToCheck","debouncedUsernameToCheck","useDebounce","fetchUsernameToCheck","abortSignal","current","API_PROFILE","method","signal","res","ok","json","abort","AbortController","signMessage","signature","headers","body","JSON","stringify","username","dateCreated","formatDistance","parseISO","created_at","Date","NEW","fetchUser","event","target","isWarning","isSuccess","minLength","maxLength","placeholder","py","minHeight","htmlFor","display","cursor","marginBottom","alignItems","flex","checked","ml","mt","Steps","TeamSelection","ProfileCreation","useProfile","hasProfile","useFetchUserNfts","useFetchCollections","PageLoader","toLowerCase","Page","fetchCollections","useFetchCollection","fetchCollection","useFetchByBunnyIdAndUpdate","useSelector","nftMarket","loadingState","latestPancakeBunniesUpdateAt","isUpdatingPancakeBunnies","existingBunniesInState","useGetAllBunniesByBunnyId","existingTokensWithBunnyId","allPancakeBunnies","useNftsFromCollection","allExistingPBTokenIds","firstBunny","existingMetadata","description","collection","collectionName","fetchMorePancakeBunnies","orderDirection","fetchNewPBAndUpdateExisting","useLoadingState","useGetCollection","checksummedCollectionAddress","isAddress","attributes","marketData","isTradable","useGetNFTInitializationState","initializationState","user","useGetNftFilters","collectionFilter","filters","activeFilters","useGetNftFilterLoadingState","Idle","useGetNftOrdering","ordering","field","direction","useGetNftShowOnlyOnSale","showOnlyOnSale","useGetNftActivityFilters","activityFilters","typeFilters","collectionFilters","approvalState","confirmState","noop","handlePreApprove","then","result","hasApproveFailed","hasConfirmFailed","logError","ButtonArrangement","StyledApproveConfirmButtonRow","mediaQueries","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","useTeam","fetchTeam","fetchTeams","profile","isProfileInitialized","isProfileLoading","hasProfileNft","profileNftTokenId","profileNftCollectionAddress","profileNftWithCollectionAddress","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UNINITIALIZED","hasAccountSwitched","isEmpty","Label","label","isDisabled","Body","Children","StyledBackgroundImage","src","e"],"mappings":"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","file":"static/js/25.f0729d3b.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Input as UIKitInput,\n  Button,\n  AutoRenewIcon,\n  CheckmarkIcon,\n  Flex,\n  WarningIcon,\n  useModal,\n  Skeleton,\n  Checkbox,\n} from '@pancakeswap/uikit'\nimport { parseISO, formatDistance } from 'date-fns'\nimport { useWeb3React } from '@web3-react/core'\nimport { formatUnits } from '@ethersproject/units'\nimport { API_PROFILE } from 'config/constants/endpoints'\nimport useToast from 'hooks/useToast'\nimport { useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { signMessage } from 'utils/web3React'\nimport fetchWithTimeout from 'utils/fetchWithTimeout'\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport { FetchStatus } from 'config/constants/types'\nimport ConfirmProfileCreationModal from './ConfirmProfileCreationModal'\nimport useProfileCreation from './contexts/hook'\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\nimport useDebounce from '../../hooks/useDebounce'\n\nenum ExistingUserState {\n  IDLE = 'idle', // initial state\n  CREATED = 'created', // username has already been created\n  NEW = 'new', // username has not been created\n}\n\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`\n\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`\n\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`\n\nconst UserName: React.FC = () => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const { teamId, selectedNft, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n  const { library, connector } = useWeb3Provider()\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\n  const [isValid, setIsValid] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const fetchAbortSignal = useRef<AbortController>(null)\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.Fetched && cakeBalance.gte(REGISTER_COST)\n  const [onPresentConfirmProfileCreation] = useModal(\n    <ConfirmProfileCreationModal\n      userName={userName}\n      selectedNft={selectedNft}\n      account={account}\n      teamId={teamId}\n      minimumCakeRequired={minimumCakeRequired}\n      allowance={allowance}\n    />,\n    false,\n  )\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\n\n  const [usernameToCheck, setUsernameToCheck] = useState<string>(undefined)\n  const debouncedUsernameToCheck = useDebounce(usernameToCheck, 200)\n\n  useEffect(() => {\n    const fetchUsernameToCheck = async (abortSignal) => {\n      try {\n        setIsLoading(true)\n        if (!debouncedUsernameToCheck) {\n          setIsValid(false)\n          setMessage('')\n          fetchAbortSignal.current = null\n        } else {\n          const res = await fetchWithTimeout(`${API_PROFILE}/api/users/valid/${debouncedUsernameToCheck}`, {\n            method: 'get',\n            signal: abortSignal,\n            timeout: 30000,\n          })\n\n          fetchAbortSignal.current = null\n\n          if (res.ok) {\n            setIsValid(true)\n            setMessage('')\n          } else {\n            const data = await res.json()\n            setIsValid(false)\n            setMessage(data?.error?.message)\n          }\n        }\n      } catch (e) {\n        setIsValid(false)\n        if (e instanceof Error && e.name !== 'AbortError') {\n          setMessage(t('Error fetching data'))\n          console.error(e)\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (fetchAbortSignal.current) {\n      fetchAbortSignal.current.abort()\n    }\n\n    fetchAbortSignal.current = new AbortController()\n\n    fetchUsernameToCheck(fetchAbortSignal.current.signal)\n  }, [debouncedUsernameToCheck, t])\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    actions.setUserName(value)\n    setUsernameToCheck(value)\n  }\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true)\n\n      const signature = await signMessage(connector, library, account, userName)\n      const response = await fetch(`${API_PROFILE}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature,\n        }),\n      })\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED)\n      } else {\n        const data = await response.json()\n        toastError(t('Error'), data?.error?.message)\n      }\n    } catch (error) {\n      toastError(error instanceof Error && error?.message ? error.message : JSON.stringify(error))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\n\n  // Perform an initial check to see if the wallet has already created a username\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${API_PROFILE}/api/users/${account}`)\n        const data = await response.json()\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\n          setMessage(t('Created %dateCreated% ago', { dateCreated }))\n\n          actions.setUserName(data.username)\n          setExistingUserState(ExistingUserState.CREATED)\n          setIsValid(true)\n        } else {\n          setExistingUserState(ExistingUserState.NEW)\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Unable to verify username'))\n      }\n    }\n\n    if (account) {\n      fetchUser()\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 4 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Your Name')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This name will be shown in team leaderboards and search results as long as your profile is active.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Set Your Name')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You can’t change this once you click Confirm.',\n            )}\n          </Text>\n          {existingUserState === ExistingUserState.IDLE ? (\n            <Skeleton height=\"40px\" width=\"240px\" />\n          ) : (\n            <InputWrap>\n              <Input\n                onChange={handleChange}\n                isWarning={userName && !isValid}\n                isSuccess={userName && isValid}\n                minLength={USERNAME_MIN_LENGTH}\n                maxLength={USERNAME_MAX_LENGTH}\n                disabled={isUserCreated}\n                placeholder={t('Enter your name...')}\n                value={userName}\n              />\n              <Indicator>\n                {isLoading && <AutoRenewIcon spin />}\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\n              </Indicator>\n            </InputWrap>\n          )}\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\n            {message}\n          </Text>\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\n            {t(\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\n            )}\n          </Text>\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\n              </div>\n              <Text ml=\"8px\">{t('I understand that people can view my wallet if they know my username')}</Text>\n            </Flex>\n          </label>\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\n            {t('Confirm')}\n          </Button>\n        </CardBody>\n      </Card>\n      <Button\n        onClick={onPresentConfirmProfileCreation}\n        disabled={!isValid || !isUserCreated}\n        id=\"completeProfileCreation\"\n      >\n        {t('Complete Profile')}\n      </Button>\n      {!hasMinimumCakeRequired && (\n        <Text color=\"failure\" mt=\"16px\">\n          {t('A minimum of %num% PCM is required', { num: formatUnits(REGISTER_COST) })}\n        </Text>\n      )}\n    </>\n  )\n}\n\nexport default UserName\n","import { parseUnits } from '@ethersproject/units'\n\nexport const MINT_COST = parseUnits('1')\nexport const REGISTER_COST = parseUnits('0.5')\nexport const ALLOWANCE_MULTIPLIER = 5\nexport const STARTER_NFT_BUNNY_IDS = ['5', '6', '7', '8', '9'] // 'sleepy', 'dollop', 'twinkle', 'churro', 'sunny'\nexport const USERNAME_MIN_LENGTH = 3\nexport const USERNAME_MAX_LENGTH = 15\n","import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\nimport { Actions, State, ContextType } from './types'\n\nconst totalCost = MINT_COST.add(REGISTER_COST)\nconst allowance = totalCost.mul(ALLOWANCE_MULTIPLIER)\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  selectedNft: {\n    collectionAddress: null,\n    tokenId: null,\n  },\n  userName: '',\n  minimumCakeRequired: totalCost,\n  allowance,\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_selected_nft':\n      return {\n        ...state,\n        selectedNft: {\n          tokenId: action.tokenId,\n          collectionAddress: action.collectionAddress,\n        },\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n\n  // Initial checks\n  useEffect(() => {\n    let isSubscribed = true\n\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract()\n      const canMint = await bunnyFactoryContract.canMint(account)\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n      if (isSubscribed) {\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n      }\n    }\n\n    if (account) {\n      fetchData()\n    }\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setSelectedNft: (tokenId: string, collectionAddress: string) =>\n        dispatch({ type: 'set_selected_nft', tokenId, collectionAddress }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Breadcrumbs, Heading, Text, Link, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Wrapper = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-top: 32px;\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nconst steps = ['Get Starter Collectible', 'Set Profile Picture', 'Join Team', 'Set Name']\n\nconst Header: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentStep } = useContext(ProfileCreationContext)\n\n  return (\n    <Wrapper>\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"8px\" id=\"profile-setup-title\">\n        {t('Profile Setup')}\n      </Heading>\n      <Heading as=\"h2\" scale=\"lg\" mb=\"8px\">\n        {t('Show off your stats and collectibles with your unique profile')}\n      </Heading>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Total cost: 1.5 PCM')}\n      </Text>\n      <Link href={`${nftsBaseUrl}/profile`}>\n        <Button mb=\"24px\" scale=\"sm\" variant=\"secondary\">\n          {t('Back to profile')}\n        </Button>\n      </Link>\n      <Breadcrumbs>\n        {steps.map((translationKey, index) => {\n          return (\n            <Text key={translationKey} color={index <= currentStep ? 'text' : 'textDisabled'}>\n              {t(translationKey)}\n            </Text>\n          )\n        })}\n      </Breadcrumbs>\n    </Wrapper>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\n\nconst WalletNotConnected = () => {\n  const { t } = useTranslation()\n\n  return (\n    <div>\n      <Heading scale=\"xl\" mb=\"8px\">\n        {t('Oops!')}\n      </Heading>\n      <Text as=\"p\" mb=\"16px\">\n        {t('Please connect your wallet to continue')}\n      </Text>\n      <ConnectWalletButton />\n    </div>\n  )\n}\n\nexport default WalletNotConnected\n","import React from 'react'\nimport { ArrowForwardIcon, Button, ButtonProps } from '@pancakeswap/uikit'\n\nconst NextStepButton: React.FC<ButtonProps> = (props) => {\n  return <Button endIcon={<ArrowForwardIcon color=\"currentColor\" />} {...props} />\n}\n\nexport default NextStepButton\n","import { useContext } from 'react'\nimport { ProfileCreationContext } from './ProfileCreationProvider'\n\nconst useProfileCreation = () => {\n  return useContext(ProfileCreationContext)\n}\n\nexport default useProfileCreation\n","import React, { useState, useEffect } from 'react'\nimport { formatUnits } from '@ethersproject/units'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport useToast from 'hooks/useToast'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiSingleTokenData } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { FetchStatus } from 'config/constants/types'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_NFT_BUNNY_IDS } from './config'\n\ninterface MintNftData extends ApiSingleTokenData {\n  bunnyId?: string\n}\n\nconst Mint: React.FC = () => {\n  const [selectedBunnyId, setSelectedBunnyId] = useState<string>('')\n  const [starterNfts, setStarterNfts] = useState<MintNftData[]>([])\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const collections = useGetCollections()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const { t } = useTranslation()\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.Fetched && cakeBalance.gte(MINT_COST)\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  useEffect(() => {\n    const getStarterNfts = async () => {\n      const { data: allPbTokens } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const nfts = STARTER_NFT_BUNNY_IDS.map((bunnyId) => {\n        if (allPbTokens && allPbTokens[bunnyId]) {\n          return { ...allPbTokens[bunnyId], bunnyId }\n        }\n        return undefined\n      })\n      setStarterNfts(nfts)\n    }\n    if (starterNfts.length === 0) {\n      getStarterNfts()\n    }\n  }, [starterNfts])\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await cakeContract.allowance(account, bunnyFactoryContract.address)\n          return response.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [bunnyFactoryContract.address, allowance.toString()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(bunnyFactoryContract, 'mintNFT', [selectedBunnyId])\n      },\n      onApproveSuccess: () => {\n        toastSuccess(t('Enabled'), t(\"Press 'confirm' to mint this NFT\"))\n      },\n      onSuccess: () => {\n        toastSuccess(t('Success'), t('You have minted your starter NFT'))\n        dispatch(fetchUserNfts({ account, collections }))\n        actions.nextStep()\n      },\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% PCM', { num: formatUnits(MINT_COST) })}\n          </Text>\n          {starterNfts.map((nft) => {\n            const handleChange = (value: string) => setSelectedBunnyId(value)\n\n            return (\n              <SelectionCard\n                key={nft?.name}\n                name=\"mintStarter\"\n                value={nft?.bunnyId}\n                image={nft?.image.thumbnail}\n                isChecked={selectedBunnyId === nft?.bunnyId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft?.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% PCM is required', { num: formatUnits(MINT_COST) })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={selectedBunnyId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n","import React, { useContext, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport { useProfileContract } from '../../hooks/useContract'\nimport multicall from '../../utils/multicall'\nimport profileABI from '../../config/abi/pancakeProfile.json'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const { library } = useWeb3React()\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const [userProfileCreationNfts, setUserProfileCreationNfts] = useState(null)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n  const profileContract = useProfileContract(false)\n\n  const { nfts, userNftsInitializationState } = useUserNfts()\n\n  useEffect(() => {\n    const fetchUserPancakeCollectibles = async () => {\n      try {\n        const nftsByCollection = Array.from(\n          nfts.reduce((acc, value) => {\n            acc.add(value.collectionAddress)\n            return acc\n          }, new Set<string>()),\n        )\n\n        if (nftsByCollection.length > 0) {\n          const nftRole = await profileContract.NFT_ROLE()\n          const collectionsNftRoleCalls = nftsByCollection.map((collectionAddress) => {\n            return {\n              address: profileContract.address,\n              name: 'hasRole',\n              params: [nftRole, collectionAddress],\n            }\n          })\n          const collectionRolesRaw = await multicall(profileABI, collectionsNftRoleCalls)\n          const collectionRoles = collectionRolesRaw.flat()\n          setUserProfileCreationNfts(\n            nfts.filter((nft) => collectionRoles[nftsByCollection.indexOf(nft.collectionAddress)]),\n          )\n        }\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n      fetchUserPancakeCollectibles()\n    }\n  }, [nfts, profileContract, userNftsInitializationState])\n\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleApprove = async () => {\n    const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\n    const tx = await callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\n    toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Enabled'), t('Please progress to the next step.'))\n      setIsApproving(false)\n      setIsApproved(true)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (userProfileCreationNfts?.length === 0) {\n    return (\n      <>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {t('We couldn’t find any Pancake Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {t(\n            'You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 2 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Only approved Pancake Collectibles can be used.')}\n            <Link to={`${nftsBaseUrl}/collections`} style={{ marginLeft: '4px' }}>\n              {t('See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {userProfileCreationNfts?.length > 0 ? (\n              userProfileCreationNfts\n                .filter((walletNft) => walletNft.location === NftLocation.WALLET)\n                .map((walletNft) => {\n                  return (\n                    <SelectionCard\n                      name=\"profilePicture\"\n                      key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\n                      value={walletNft.tokenId}\n                      image={walletNft.image.thumbnail}\n                      isChecked={walletNft.tokenId === selectedNft.tokenId}\n                      onChange={(value: string) => actions.setSelectedNft(value, walletNft.collectionAddress)}\n                    >\n                      <Text bold>{walletNft.name}</Text>\n                    </SelectionCard>\n                  )\n                })\n            ) : (\n              <Skeleton width=\"100%\" height=\"64px\" />\n            )}\n          </NftWrapper>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t(\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n            id=\"approveStarterCollectible\"\n          >\n            {t('Enable')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n","import React, { useMemo } from 'react'\nimport { Card, CardBody, CommunityIcon, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport shuffle from 'lodash/shuffle'\nimport { useTeams } from 'state/teams/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\n\nconst Team: React.FC = () => {\n  const { teamId: currentTeamId, actions } = useProfileCreation()\n  const { t } = useTranslation()\n  const { teams } = useTeams()\n  const handleTeamSelection = (value: string) => actions.setTeamId(parseInt(value, 10))\n  const teamValues = useMemo(() => shuffle(Object.values(teams)), [teams])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 3 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Join a Team')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('It won’t be possible to undo the choice you make for the foreseeable future!')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Join a Team')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'There’s currently no big difference between teams, and no benefit of joining one team over another for now. So pick whichever one you like!',\n            )}\n          </Text>\n          {teamValues &&\n            teamValues.map((team) => {\n              return (\n                <SelectionCard\n                  key={team.name}\n                  name=\"teams-selection\"\n                  value={team.id}\n                  isChecked={currentTeamId === team.id}\n                  image={`/images/teams/${team.images.md}`}\n                  onChange={handleTeamSelection}\n                  disabled={!team.isJoinable}\n                >\n                  <Text bold>{team.name}</Text>\n                  <Flex>\n                    <CommunityIcon mr=\"8px\" />\n                    <Text>{team.users.toLocaleString()}</Text>\n                  </Flex>\n                </SelectionCard>\n              )\n            })}\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={currentTeamId === null}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Team\n","interface FetchTimeoutOptions extends RequestInit {\n  timeout?: number\n}\n\nconst fetchWithTimeout = (url, options: FetchTimeoutOptions = {}): Promise<Response> => {\n  const { timeout = 10000, ...fetchOptions } = options\n\n  return Promise.race([\n    fetch(url, fetchOptions),\n    new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new Error(`Request for ${url} timed out after ${timeout} milliseconds`))\n      }, timeout)\n    }),\n  ]) as Promise<Response>\n}\n\nexport default fetchWithTimeout\n","import React from 'react'\nimport { Modal, Flex, Text } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport { formatUnits } from '@ethersproject/units'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useProfileContract } from 'hooks/useContract'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport { REGISTER_COST } from './config'\nimport { State } from './contexts/types'\n\ninterface Props {\n  userName: string\n  selectedNft: State['selectedNft']\n  account: string\n  teamId: number\n  minimumCakeRequired: ethers.BigNumber\n  allowance: ethers.BigNumber\n  onDismiss?: () => void\n}\n\nconst ConfirmProfileCreationModal: React.FC<Props> = ({\n  account,\n  teamId,\n  selectedNft,\n  minimumCakeRequired,\n  allowance,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const profileContract = useProfileContract()\n  const dispatch = useAppDispatch()\n  const { toastSuccess } = useToast()\n  const cakeContract = useCake()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await cakeContract.allowance(account, profileContract.address)\n          return response.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [profileContract.address, allowance.toJSON()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(profileContract, 'createProfile', [\n          teamId,\n          selectedNft.collectionAddress,\n          selectedNft.tokenId,\n        ])\n      },\n      onSuccess: async ({ receipt }) => {\n        await dispatch(fetchProfile(account))\n        onDismiss()\n        toastSuccess(t('Profile created!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      },\n    })\n\n  return (\n    <Modal title={t('Complete Profile')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Submitting NFT to contract and confirming User Name and Team.')}\n      </Text>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Text>{t('Cost')}</Text>\n        <Text>{t('%num% PCM', { num: formatUnits(REGISTER_COST) })}</Text>\n      </Flex>\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n    </Modal>\n  )\n}\n\nexport default ConfirmProfileCreationModal\n","import React, { useContext } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport NoWalletConnected from './WalletNotConnected'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport Mint from './Mint'\nimport ProfilePicture from './ProfilePicture'\nimport TeamSelection from './TeamSelection'\nimport UserName from './UserName'\n\nconst Steps = () => {\n  const { t } = useTranslation()\n  const { isInitialized, currentStep } = useContext(ProfileCreationContext)\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <NoWalletConnected />\n  }\n\n  if (!isInitialized) {\n    return <div>{t('Loading...')}</div>\n  }\n\n  if (currentStep === 0) {\n    return <Mint />\n  }\n\n  if (currentStep === 1) {\n    return <ProfilePicture />\n  }\n\n  if (currentStep === 2) {\n    return <TeamSelection />\n  }\n\n  if (currentStep === 3) {\n    return <UserName />\n  }\n\n  return null\n}\n\nexport default Steps\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Redirect } from 'react-router'\nimport Page from 'components/Layout/Page'\nimport { useProfile } from 'state/profile/hooks'\nimport PageLoader from 'components/Loader/PageLoader'\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useFetchCollections } from 'state/nftMarket/hooks'\nimport Header from './Header'\nimport ProfileCreationProvider from './contexts/ProfileCreationProvider'\nimport Steps from './Steps'\n\nconst ProfileCreation = () => {\n  const { account } = useWeb3React()\n  const { isInitialized, isLoading, hasProfile } = useProfile()\n\n  useFetchUserNfts()\n  useFetchCollections()\n\n  if (!isInitialized || isLoading) {\n    return <PageLoader />\n  }\n\n  if (account && hasProfile) {\n    return <Redirect to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`} />\n  }\n\n  return (\n    <>\n      <ProfileCreationProvider>\n        <Page>\n          <Header />\n          <Steps />\n        </Page>\n      </ProfileCreationProvider>\n    </>\n  )\n}\n\nexport default ProfileCreation\n","import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { isAddress } from 'utils'\nimport { FetchStatus } from 'config/constants/types'\nimport { fetchCollection, fetchCollections, fetchNewPBAndUpdateExisting } from './reducer'\nimport { State } from '../types'\nimport { NftActivityFilter, NftFilter, NftToken, UserNftsState } from './types'\n\nconst MAX_GEN0_ID = 4\n\nexport const useFetchCollections = () => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(fetchCollections())\n  }, [dispatch])\n}\n\nexport const useFetchCollection = (collectionAddress: string) => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(fetchCollection(collectionAddress))\n  }, [dispatch, collectionAddress])\n}\n\n// Returns a function that fetches more NFTs for specified bunny id\n// as well as updating existing PB NFTs in state\n// Note: PancakeBunny specific\nexport const useFetchByBunnyIdAndUpdate = (bunnyId: string) => {\n  const dispatch = useAppDispatch()\n\n  const { latestPancakeBunniesUpdateAt, isUpdatingPancakeBunnies } = useSelector(\n    (state: State) => state.nftMarket.data.loadingState,\n  )\n\n  // Extra guard in case market data shifts\n  // we don't wanna fetch same tokens multiple times\n  const existingBunniesInState = useGetAllBunniesByBunnyId(bunnyId)\n  const existingTokensWithBunnyId = existingBunniesInState ? existingBunniesInState.map((nft) => nft.tokenId) : []\n\n  const allPancakeBunnies = useNftsFromCollection(pancakeBunniesAddress)\n  const allExistingPBTokenIds = allPancakeBunnies ? allPancakeBunnies.map((nft) => nft.tokenId) : []\n\n  const firstBunny = existingBunniesInState.length > 0 ? existingBunniesInState[0] : null\n\n  // If we already have NFT with this bunny id in state - we can reuse its metadata without making API request\n  const existingMetadata = useMemo(() => {\n    return firstBunny\n      ? {\n          name: firstBunny.name,\n          description: firstBunny.description,\n          collection: { name: firstBunny.collectionName },\n          image: firstBunny.image,\n        }\n      : null\n  }, [firstBunny])\n\n  // This fetches more bunnies when called\n  const fetchMorePancakeBunnies = (orderDirection: 'asc' | 'desc') => {\n    dispatch(\n      fetchNewPBAndUpdateExisting({\n        bunnyId,\n        existingTokensWithBunnyId,\n        allExistingPBTokenIds,\n        existingMetadata,\n        orderDirection,\n      }),\n    )\n  }\n\n  return { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies }\n}\n\nexport const useLoadingState = () => {\n  return useSelector((state: State) => state.nftMarket.data.loadingState)\n}\n\nexport const useGetCollections = () => {\n  return useSelector((state: State) => state.nftMarket.data.collections)\n}\n\nexport const useGetCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const collections = useGetCollections()\n  return collections[checksummedCollectionAddress]\n}\n\nexport const useNftsFromCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[checksummedCollectionAddress])\n  return nfts\n}\n\nexport const useGetAllBunniesByBunnyId = (bunnyId: string) => {\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[pancakeBunniesAddress])\n  return nfts ? nfts.filter((nft) => nft.attributes[0].value === bunnyId && nft.marketData.isTradable) : []\n}\n\nexport const useGetNFTInitializationState = () => {\n  return useSelector((state: State) => state.nftMarket.initializationState)\n}\n\nexport const useUserNfts = (): UserNftsState => {\n  return useSelector((state: State) => state.nftMarket.data.user)\n}\n\nexport const useHasGen0Nfts = (): boolean => {\n  const userNfts = useSelector((state: State) => state.nftMarket.data.user)\n  return userNfts.nfts.some((nft) => nft.attributes && Number(nft.attributes[0]?.value) <= MAX_GEN0_ID)\n}\n\nexport const useGetNftFilters = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.activeFilters : {}\n}\n\nexport const useGetNftFilterLoadingState = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.loadingState : FetchStatus.Idle\n}\n\nexport const useGetNftOrdering = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.ordering : { field: 'currentAskPrice', direction: 'asc' as 'asc' | 'desc' }\n}\n\nexport const useGetNftShowOnlyOnSale = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.showOnlyOnSale : true\n}\n\nexport const useGetNftActivityFilters = (collectionAddress: string) => {\n  const collectionFilter: NftActivityFilter = useSelector(\n    (state: State) => state.nftMarket.data.activityFilters[collectionAddress],\n  )\n  return collectionFilter || { typeFilters: [], collectionFilters: [] }\n}\n","import React, { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { logError } from 'utils/sentry'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastSuccess, toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    hasApproveFailed: state.approvalState === 'fail',\n    hasConfirmFailed: state.confirmState === 'fail',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        logError(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async (params = {}) => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm(params)\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        logError(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { Team } from 'config/constants/types'\nimport { State, TeamsState } from '../types'\nimport { fetchTeam, fetchTeams } from '.'\n\nexport const useTeam = (id: number) => {\n  const team: Team = useSelector((state: State) => state.teams.data[id])\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeam(id))\n  }, [id, dispatch])\n\n  return team\n}\n\nexport const useTeams = () => {\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeams())\n  }, [dispatch])\n\n  return { teams: data, isInitialized, isLoading }\n}\n","import { useEffect, useMemo } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useProfile } from 'state/profile/hooks'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useFetchUserNfts = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\n  const { userNftsInitializationState } = useUserNfts()\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\n\n  // Fetch on first load when profile fetch is resolved\n  const shouldFetch =\n    account &&\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\n    isProfileInitialized &&\n    !isProfileLoading\n\n  // Fetch on account / profile change, once profile fetch is resolved\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\n\n  useEffect(() => {\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\n    }\n  }, [\n    dispatch,\n    account,\n    shouldFetch,\n    hasAccountSwitched,\n    profileNftTokenId,\n    collections,\n    profileNftWithCollectionAddress,\n  ])\n}\n\nexport default useFetchUserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </Card>\n  )\n}\n\nexport default SelectionCard\n"],"sourceRoot":""}