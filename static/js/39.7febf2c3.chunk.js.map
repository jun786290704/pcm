{"version":3,"sources":["components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx","views/Nft/market/components/CollectibleCard/styles.tsx","views/Nft/market/hooks/useGetLowestPrice.ts"],"names":["CollapsibleCard","initialOpenState","title","children","props","useState","isOpen","setIsOpen","p","alignItems","justifyContent","as","variant","scale","onClick","width","StyledSortButton","styled","button","theme","colors","secondary","TableWrapper","div","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","name","src","height","mr","LowestPriceCell","bunnyId","useGetLowestPriceFromBunnyId","isFetching","lowestPrice","amount","PancakeBunniesTraits","collectionAddress","raritySort","setRaritySort","t","useTranslation","push","useHistory","useGetCollectionDistributionPB","distributionData","data","totalBunnyCount","total","isFetchingDistribution","sortedTokenList","useMemo","Object","keys","distributionKeys","values","map","token","index","tokenId","sort","tokenA","tokenB","tokenCount","textAlign","times","bunnyCnt","type","currentValue","color","count","percentage","nftsBaseUrl","image","thumbnail","formatNumber","CollectionTraits","useGetCollectionDistribution","traitType","sum","traitValues","reduce","accum","traitValue","rarity","value","sortType","capitalize","mb","prevRaritySort","orderBy","Traits","useParams","dispatch","useAppDispatch","collection","useGetCollection","useEffect","fetchCollection","Header","Container","py","pancakeBunniesAddress","BNBAmountLabel","mx","fontWeight","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","CostLabel","cost","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","fontSize","MetaRow","maxWidth","ellipsis","StyledCollectibleCard","Card","mediaQueries","lg","LowestPriceMetaRow","getBunnyIdFromNft","nft","attributes","find","attr","toString","setIsFetching","setLowestPrice","a","getNftsMarketData","otherId","isTradable","response","length","tokenMarketData","parseFloat","currentAskPrice","fetchLowestPrice","useGetLowestPriceFromNft","isPancakeBunny","toLowerCase","bunnyIdAttr"],"mappings":"4TAqCeA,EApByC,SAAC,GAA4D,IAAD,IAAzDC,wBAAyD,SAAhCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAaC,EAAY,iBAClH,EAA4BC,mBAASJ,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAIA,OACE,eAAC,IAAD,2BAAUH,GAAV,cACE,cAAC,IAAD,CAAYI,EAAE,OAAd,SACE,eAAC,KAAD,CAAMC,WAAW,SAASC,eAAe,gBAAzC,UACE,cAAC,KAAD,CAASC,GAAG,KAAZ,SAAkBT,IAClB,cAAC,KAAD,CAAYU,QAAQ,OAAOC,MAAM,KAAKC,QAP3B,kBAAMP,GAAWD,IAO5B,SACGA,EAAS,cAAC,IAAD,CAAeS,MAAM,SAAY,cAAC,IAAD,CAAiBA,MAAM,gBAIvET,GAAUH,O,yCC5BJa,EAAmBC,IAAOC,OAAV,2HAIlB,qBAAGC,MAAkBC,OAAOC,aAI1BC,EAAeL,IAAOM,IAAV,4GAMZC,EAAWP,YAAOQ,KAAPR,CAAH,sFAORS,EAAeT,IAAOU,GAAV,2GAUZC,EAA4D,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAjB,OACvE,eAAC,KAAD,CAAMrB,WAAW,SAAjB,UACE,cAACe,EAAD,CAAUO,IAAKF,EAAcd,MAAO,GAAIiB,OAAQ,GAAIC,GAAG,QACvD,cAAC,KAAD,UAAOH,Q,SCpBLI,EAAiD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACxD,EAAoCC,YAA6BD,GAAzDE,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAEpB,OAAID,EAEA,cAAC,KAAD,CAAM3B,eAAe,WAAWK,MAAM,QAAtC,SACE,cAAC,KAAD,CAAUiB,OAAO,OAAOjB,MAAM,WAK/BuB,EAIE,cAAC,IAAD,CAAgB5B,eAAe,WAAW6B,OAAQD,EAAavB,MAAM,UAHnE,MAmHIyB,EA7GmD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACnE,EAAoCpC,mBAAmB,OAAvD,mBAAOqC,EAAP,KAAmBC,EAAnB,KACQC,EAAMC,cAAND,EACAE,EAASC,cAATD,KACR,EAIIE,cAHIC,EADR,EACEC,KACOC,EAFT,EAEEC,MACYC,EAHd,EAGEhB,WAGIiB,EAAkBC,mBAAQ,WAC9B,IAAKN,IAAqBO,OAAOC,KAAKR,GAAmB,MAAO,GAEhE,IAAMS,EAA6BF,OAAOC,KAAKR,GAG/C,OAFkCO,OAAOG,OAAOV,GAG7CW,KAAI,SAACC,EAAOC,GAAR,mBAAC,eAAuBD,GAAxB,IAA+BE,QAASL,EAAiBI,QAC7DE,MAAK,SAACC,EAAQC,GACb,MAAsB,QAAfxB,EAAuBuB,EAAOE,WAAaD,EAAOC,WAAaD,EAAOC,WAAaF,EAAOE,gBAEpG,CAACzB,EAAYO,IAMhB,OACE,mCACII,EA6CA,cAAC,EAAD,CAAiBnD,MAAO0C,EAAE,cAA1B,SACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIwB,UAAU,OAAd,SAAsBxB,EAAE,UACxB,cAAC,KAAD,UAAKA,EAAE,WACP,cAAC,KAAD,UAAKA,EAAE,YACP,cAAC,KAAD,UAAKA,EAAE,iBAGX,gCACGyB,IAAM,IAAIT,KAAI,SAACU,GAAD,OACb,+BACE,cAAC,KAAD,UACE,eAAC,KAAD,CAAM7D,WAAW,SAAjB,UACE,cAAC,KAAD,CAAUuB,OAAO,OAAOjB,MAAM,OAAOkB,GAAG,QACxC,cAAC,KAAD,CAAUlB,MAAM,eAGpB,cAAC,KAAD,UACE,cAAC,KAAD,MAEF,cAAC,KAAD,UACE,cAAC,KAAD,QAXKuD,aAxDjB,cAAC,EAAD,CAAiBpE,MAAO0C,EAAE,YAA1B,SACE,cAACtB,EAAD,UACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAI8C,UAAU,OAAd,SAAsBxB,EAAE,UACxB,cAAC,KAAD,UAAKA,EAAE,WACP,cAAC,KAAD,UACE,cAAC5B,EAAD,CAAkBuD,KAAK,SAASzD,QAfzB,WACvB6B,GAAc,SAAC6B,GAAD,MAAoC,QAAjBA,EAAyB,OAAS,UAcnD,SACE,eAAC,KAAD,CAAM/D,WAAW,SAAjB,UACGmC,EAAE,UACa,QAAfF,EAAuB,cAAC,IAAD,CAAa+B,MAAM,cAAiB,cAAC,IAAD,CAAeA,MAAM,qBAIvF,cAAC,KAAD,CAAIL,UAAU,QAAd,SAAuBxB,EAAE,iBAG7B,gCACGU,EAAgBM,KAAI,SAACC,GACpB,IAAMa,EAAgBb,EAAMM,WACtBQ,EAAcD,EAAQvB,EAAmB,IAK/C,OACE,eAACzB,EAAD,CAAkCZ,QALhB,WAClBgC,EAAK,GAAD,OAAI8B,IAAJ,wBAA+BnC,EAA/B,YAAoDoB,EAAME,WAIN7D,MAAO0C,EAAE,qBAAjE,UACE,cAAC,KAAD,UACE,cAAC,EAAD,CAASf,aAAcgC,EAAMgB,MAAMC,UAAWhD,KAAM+B,EAAM/B,SAE5D,cAAC,KAAD,CAAIsC,UAAU,SAAd,SAAwBW,YAAaL,EAAO,EAAG,KAC/C,cAAC,KAAD,CAAIN,UAAU,SAAd,mBAA2BW,YAAaJ,EAAY,EAAG,GAAvD,OACA,cAAC,KAAD,CAAIP,UAAU,QAAQrD,MAAM,QAA5B,SACE,cAAC,EAAD,CAAiBoB,QAAS0B,EAAME,cAPjBF,EAAME,wB,uECoC9BiB,EAhH2C,SAAC,GAA2B,IAAzBvC,EAAwB,EAAxBA,kBAC3D,EAA6BwC,YAA6BxC,GAAlDS,EAAR,EAAQA,KAAMb,EAAd,EAAcA,WACd,EAAoChC,mBAAmC,IAAvE,mBAAOqC,EAAP,KAAmBC,EAAnB,KACQC,EAAMC,cAAND,EAER,OAAIP,EAEA,cAAC,EAAD,CAAiBnC,MAAO0C,EAAE,cAA1B,SACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIwB,UAAU,OAAd,SAAsBxB,EAAE,UACxB,cAAC,KAAD,CAAI7B,MAAM,QAAV,SAAmB6B,EAAE,WACrB,cAAC,KAAD,CAAI7B,MAAM,QAAV,SAAmB6B,EAAE,iBAGzB,gCACGyB,IAAM,IAAIT,KAAI,SAACU,GAAD,OACb,+BACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAUvD,MAAM,YAElB,cAAC,KAAD,UACE,cAAC,KAAD,MAEF,cAAC,KAAD,UACE,cAAC,KAAD,QARKuD,aAmBnB,mCACGpB,GACCM,OAAOC,KAAKP,GAAMU,KAAI,SAACsB,EAAWpB,GAChC,IAAMV,EAAQ+B,IAAI3B,OAAOG,OAAOT,EAAKgC,KAG/BE,EAAkE5B,OAAOC,KAAKP,EAAKgC,IAAYG,QACnG,SAACC,EAAOC,GACN,IAAMb,EAAQxB,EAAKgC,GAAWK,GACxBC,EAAUd,EAAQtB,EAAS,IAEjC,MAAM,GAAN,mBAAWkC,GAAX,CAAkB,CAAEG,MAAOF,EAAYb,QAAOc,cAEhD,IAEIE,EAAWhD,EAAWwC,IAAc,OAkB1C,OACE,cAAC,EAAD,CAAiChF,MAAOyF,IAAWT,GAAYjF,iBAAkB6D,GAAS,EAAG8B,GAAG,OAAhG,SACE,cAACtE,EAAD,UACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAI8C,UAAU,OAAd,SAAsBxB,EAAE,UACxB,cAAC,KAAD,CAAI7B,MAAM,QAAV,SAAmB6B,EAAE,WACrB,cAAC,KAAD,CAAI7B,MAAM,QAAV,SACE,cAACC,EAAD,CAAkBuD,KAAK,SAASzD,QAzBrB,WACvB6B,GAAc,SAACkD,GACb,OAAKA,EAAeX,GAOb,2BACFW,GADL,kBAEGX,EAA0C,QAA9BW,EAAeX,GAAuB,OAAS,QARrD,2BACFW,GADL,kBAEGX,EAAY,YAoBP,SACE,eAAC,KAAD,CAAMzE,WAAW,SAAjB,UACGmC,EAAE,UACwB,QAA1BF,EAAWwC,GACV,cAAC,IAAD,CAAaT,MAAM,cAEnB,cAAC,IAAD,CAAeA,MAAM,0BAOjC,gCACGqB,IAAQV,EAAa,SAAUM,GAAU9B,KAAI,YAA+B,IAA5B6B,EAA2B,EAA3BA,MAAOf,EAAoB,EAApBA,MAAOc,EAAa,EAAbA,OAC7D,OACE,+BACE,cAAC,KAAD,UAAKG,IAAWF,KAChB,cAAC,KAAD,CAAIrB,UAAU,SAAd,SAAwBW,YAAaL,EAAO,EAAG,KAC/C,cAAC,KAAD,CAAIN,UAAU,SAAd,mBAA2BW,YAAaS,EAAQ,EAAG,GAAnD,SAHOC,cAxBCP,SCpDnBa,UAzBA,WACb,IAAQtD,EAAsBuD,cAAtBvD,kBACFwD,EAAWC,cACXC,EAAaC,YAAiB3D,GAQpC,OANA4D,qBAAU,WACJ5D,GACFwD,EAASK,YAAgB7D,MAE1B,CAACA,EAAmBwD,IAGrB,qCACE,cAACM,EAAA,EAAD,CAAQJ,WAAYA,IACpB,cAACK,EAAA,EAAD,CAAWC,GAAG,OAAd,SACGhE,IAAsBiE,IACrB,cAAC,EAAD,CAAsBjE,kBAAmBA,IAEzC,cAAC,EAAD,CAAkBA,kBAAmBA,W,iVCAlCkE,EAAgD,SAAC,GAAD,IAAGpE,EAAH,EAAGA,OAAWnC,EAAd,wBAC3D,eAAC,KAAD,yBAAMK,WAAW,UAAaL,GAA9B,cACE,cAAC,IAAD,CAAaW,MAAM,OAAO6F,GAAG,QAC7B,cAAC,KAAD,CAAMC,WAAW,MAAjB,SACGtE,EAAOuE,oBAAeC,EAAW,CAChCC,sBAAuB,EACvBC,sBAAuB,WAWlBC,EAAsC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,aAAiBhH,EAAY,iBACjFiH,EAAaC,YAAsBF,EAAcD,GAEvD,OACE,eAAC,KAAD,yBAAM1G,WAAW,UAAaL,GAA9B,cACGiH,EAAa,GACZ,cAAC,KAAD,CAAME,SAAS,OAAO9C,MAAM,aAA5B,qBAA+C4C,EAAWP,oBAAeC,EAAW,CAClFC,sBAAuB,EACvBC,sBAAuB,IAFzB,OAKF,cAACN,EAAD,CAAgBpE,OAAQ4E,SASjBK,EAAkC,SAAC,GAAD,IAAGtH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAaC,EAAvB,wBAC7C,eAAC,KAAD,yBAAMK,WAAW,SAASC,eAAe,iBAAoBN,GAA7D,cACE,cAAC,KAAD,CAAMmH,SAAS,OAAO9C,MAAM,aAAagD,SAAS,QAAQC,UAAQ,EAACxH,MAAOA,EAA1E,SACGA,IAEH,cAAC,IAAD,UAAMC,SAgDGwH,EAAwB1G,YAAO2G,IAAP3G,CAAH,sOAS9B,qBAAGE,MAAkB0G,aAAaC,MAazBC,EAAqB,SAAC,GAAwE,IAAtEzF,EAAqE,EAArEA,YAAaD,EAAwD,EAAxDA,WAAY+E,EAA4C,EAA5CA,aACpDxE,EAAMC,cAAND,EAER,OAAKP,GAAeC,EAKlB,cAACkF,EAAD,CAAStH,MAAO0C,EAAE,gBAAlB,SACGP,EACC,cAAC,KAAD,CAAUL,OAAO,OAAOjB,MAAM,SAE9B,cAACmG,EAAD,CAAWC,KAAM7E,EAAa8E,aAAcA,MARzC,O,gKCvILY,EAAoB,SAACC,GAA2B,IAAD,IAC7C9F,EAAO,UAAG8F,EAAIC,kBAAP,iBAAG,EAAgBC,MAAK,SAACC,GAAD,MAA6B,YAAnBA,EAAKlD,oBAAvC,aAAG,EAA8DO,MAC9E,OAAOtD,EAAUA,EAAQkG,WAAa,MAG3BjG,EAA+B,SAACD,GAC3C,MAAoC9B,oBAAkB,GAAtD,mBAAOgC,EAAP,KAAmBiG,EAAnB,KACA,EAAsCjI,mBAAiB,MAAvD,mBAAOiC,EAAP,KAAoBiG,EAApB,KAsBA,OApBAlC,qBAAU,WAeJlE,GAdkB,uCAAG,gCAAAqG,EAAA,sEAErBF,GAAc,GAFO,SAGEG,YAAkB,CAAEC,QAASvG,EAASwG,YAAY,GAAQ,EAAG,kBAAmB,OAHlF,QAGfC,EAHe,QAKRC,OAAS,IAAI,EAAD,YACGD,EADH,GAChBE,EADgB,KAEvBP,EAAeQ,WAAWD,EAAgBE,mBAPvB,uBAUrBV,GAAc,GAVO,uEAAH,oDAepBW,KAED,CAAC9G,IAEG,CAAEE,aAAYC,gBAGV4G,EAA2B,SAACjB,GAAmC,IAAD,EACzE,EAAoC5H,oBAAkB,GAAtD,mBAAOgC,EAAP,KAAmBiG,EAAnB,KACA,EAAsCjI,mBAAiB,MAAvD,mBAAOiC,EAAP,KAAoBiG,EAApB,KACMY,GAAiB,UAAAlB,EAAIxF,yBAAJ,eAAuB2G,iBAAkB1C,IAAsB0C,cA4BtF,OA1BA/C,qBAAU,WAqBJ8C,GAAkBlB,GApBA,uCAAG,kCAAAO,EAAA,6DACjBa,EAAcrB,EAAkBC,GADf,SAGrBK,GAAc,GAHO,SAIEG,YACrB,CAAEC,QAASW,EAAaV,YAAY,GACpC,EACA,kBACA,OARmB,QAIfC,EAJe,QAWRC,OAAS,IAAI,EAAD,YACGD,EADH,GAChBE,EADgB,KAEvBP,EAAeQ,WAAWD,EAAgBE,mBAbvB,uBAgBrBV,GAAc,GAhBO,yEAAH,oDAqBpBW,KAED,CAACE,EAAgBlB,IAEb,CAAE5F,aAAYC","file":"static/js/39.7febf2c3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  CardProps,\n  CardHeader,\n  Card,\n  Flex,\n  Heading,\n  IconButton,\n  ChevronUpIcon,\n  ChevronDownIcon,\n} from '@pancakeswap/uikit'\n\ninterface CollapsibleCardProps extends CardProps {\n  initialOpenState?: boolean\n  title: string\n}\n\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState)\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  return (\n    <Card {...props}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\">{title}</Heading>\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\n          </IconButton>\n        </Flex>\n      </CardHeader>\n      {isOpen && children}\n    </Card>\n  )\n}\n\nexport default CollapsibleCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const TableWrapper = styled.div`\n  -webkit-overflow-scrolling: touch;\n  min-width: 320px;\n  overflow-x: auto;\n`\n\nexport const NftImage = styled(Image)`\n  flex: none;\n  & > img {\n    border-radius: 8px;\n  }\n`\n\nexport const ClickableRow = styled.tr`\n  cursor: pointer;\n\n  &:hover {\n    td {\n      opacity: 0.65;\n    }\n  }\n`\n\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\n  <Flex alignItems=\"center\">\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\n    <Text>{name}</Text>\n  </Flex>\n)\n","import React, { useMemo, useState } from 'react'\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useHistory } from 'react-router'\nimport times from 'lodash/times'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\nimport { nftsBaseUrl } from '../../constants'\nimport { SortType } from '../../types'\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\nimport { useGetCollectionDistributionPB } from '../../hooks/useGetCollectionDistribution'\n\ninterface PancakeBunniesTraitsProps {\n  collectionAddress: string\n}\n\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\n\n  if (isFetching) {\n    return (\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\n        <Skeleton height=\"24px\" width=\"48px\" />\n      </Flex>\n    )\n  }\n\n  if (!lowestPrice) {\n    return null\n  }\n\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\n}\n\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\n  const { t } = useTranslation()\n  const { push } = useHistory()\n  const {\n    data: distributionData,\n    total: totalBunnyCount,\n    isFetching: isFetchingDistribution,\n  } = useGetCollectionDistributionPB()\n\n  const sortedTokenList = useMemo(() => {\n    if (!distributionData || !Object.keys(distributionData)) return []\n\n    const distributionKeys: string[] = Object.keys(distributionData)\n    const distributionValues: any[] = Object.values(distributionData)\n\n    return distributionValues\n      .map((token, index) => ({ ...token, tokenId: distributionKeys[index] }))\n      .sort((tokenA, tokenB) => {\n        return raritySort === 'asc' ? tokenA.tokenCount - tokenB.tokenCount : tokenB.tokenCount - tokenA.tokenCount\n      })\n  }, [raritySort, distributionData])\n\n  const toggleRaritySort = () => {\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  return (\n    <>\n      {!isFetchingDistribution ? (\n        <CollapsibleCard title={t('Bunny Id')}>\n          <TableWrapper>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign=\"left\">{t('Name')}</Th>\n                  <Th>{t('Count')}</Th>\n                  <Th>\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                      <Flex alignItems=\"center\">\n                        {t('Rarity')}\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\n                      </Flex>\n                    </StyledSortButton>\n                  </Th>\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedTokenList.map((token) => {\n                  const count: number = token.tokenCount\n                  const percentage = (count / totalBunnyCount) * 100\n                  const handleClick = () => {\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${token.tokenId}`)\n                  }\n\n                  return (\n                    <ClickableRow key={token.tokenId} onClick={handleClick} title={t('Click to view NFT')}>\n                      <Td>\n                        <NftName thumbnailSrc={token.image.thumbnail} name={token.name} />\n                      </Td>\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\n                      <Td textAlign=\"right\" width=\"100px\">\n                        <LowestPriceCell bunnyId={token.tokenId} />\n                      </Td>\n                    </ClickableRow>\n                  )\n                })}\n              </tbody>\n            </Table>\n          </TableWrapper>\n        </CollapsibleCard>\n      ) : (\n        <CollapsibleCard title={t('Loading...')}>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign=\"left\">{t('Name')}</Th>\n                <Th>{t('Count')}</Th>\n                <Th>{t('Rarity')}</Th>\n                <Th>{t('Lowest')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              {times(19).map((bunnyCnt) => (\n                <tr key={bunnyCnt}>\n                  <Td>\n                    <Flex alignItems=\"center\">\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\n                      <Skeleton width=\"100px\" />\n                    </Flex>\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </CollapsibleCard>\n      )}\n    </>\n  )\n}\n\nexport default PancakeBunniesTraits\n","import React, { useState } from 'react'\nimport times from 'lodash/times'\nimport capitalize from 'lodash/capitalize'\nimport sum from 'lodash/sum'\nimport orderBy from 'lodash/orderBy'\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { SortType } from '../../types'\nimport { StyledSortButton, TableWrapper } from './styles'\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\n\ninterface CollectionTraitsProps {\n  collectionAddress: string\n}\n\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\n  const { t } = useTranslation()\n\n  if (isFetching) {\n    return (\n      <CollapsibleCard title={t('Loading...')}>\n        <Table>\n          <thead>\n            <tr>\n              <Th textAlign=\"left\">{t('Name')}</Th>\n              <Th width=\"100px\">{t('Count')}</Th>\n              <Th width=\"160px\">{t('Rarity')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {times(19).map((bunnyCnt) => (\n              <tr key={bunnyCnt}>\n                <Td>\n                  <Skeleton width=\"100px\" />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </CollapsibleCard>\n    )\n  }\n\n  return (\n    <>\n      {data &&\n        Object.keys(data).map((traitType, index) => {\n          const total = sum(Object.values(data[traitType]))\n\n          // Parse the distribution values into an array to make it easier to sort\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\n            (accum, traitValue) => {\n              const count = data[traitType][traitValue]\n              const rarity = (count / total) * 100\n\n              return [...accum, { value: traitValue, count, rarity }]\n            },\n            [],\n          )\n          const sortType = raritySort[traitType] || 'desc'\n\n          const toggleRaritySort = () => {\n            setRaritySort((prevRaritySort) => {\n              if (!prevRaritySort[traitType]) {\n                return {\n                  ...prevRaritySort,\n                  [traitType]: 'asc',\n                }\n              }\n\n              return {\n                ...prevRaritySort,\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\n              }\n            })\n          }\n\n          return (\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\n              <TableWrapper>\n                <Table>\n                  <thead>\n                    <tr>\n                      <Th textAlign=\"left\">{t('Name')}</Th>\n                      <Th width=\"100px\">{t('Count')}</Th>\n                      <Th width=\"160px\">\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                          <Flex alignItems=\"center\">\n                            {t('Rarity')}\n                            {raritySort[traitType] === 'asc' ? (\n                              <ArrowUpIcon color=\"secondary\" />\n                            ) : (\n                              <ArrowDownIcon color=\"secondary\" />\n                            )}\n                          </Flex>\n                        </StyledSortButton>\n                      </Th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\n                      return (\n                        <tr key={value}>\n                          <Td>{capitalize(value)}</Td>\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </TableWrapper>\n            </CollapsibleCard>\n          )\n        })}\n    </>\n  )\n}\n\nexport default CollectionTraits\n","import React, { useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport Container from 'components/Layout/Container'\nimport { useAppDispatch } from 'state'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { fetchCollection } from 'state/nftMarket/reducer'\nimport Header from '../Header'\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\nimport { pancakeBunniesAddress } from '../../constants'\nimport CollectionTraits from './CollectionTraits'\n\nconst Traits = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const dispatch = useAppDispatch()\n  const collection = useGetCollection(collectionAddress)\n\n  useEffect(() => {\n    if (collectionAddress) {\n      dispatch(fetchCollection(collectionAddress))\n    }\n  }, [collectionAddress, dispatch])\n\n  return (\n    <>\n      <Header collection={collection} />\n      <Container py=\"40px\">\n        {collectionAddress === pancakeBunniesAddress ? (\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\n        ) : (\n          <CollectionTraits collectionAddress={collectionAddress} />\n        )}\n      </Container>\n    </>\n  )\n}\n\nexport default Traits\n","import React, { ReactElement } from 'react'\nimport {\n  Card,\n  BinanceIcon,\n  Box,\n  BoxProps,\n  CameraIcon,\n  Flex,\n  FlexProps,\n  SellIcon,\n  Text,\n  WalletFilledIcon,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport styled from 'styled-components'\n\nexport const Footer: React.FC<BoxProps> = ({ children, ...props }) => (\n  <Box borderTop={[null, null, null, '1px solid']} borderColor=\"cardBorder\" pt=\"8px\" {...props}>\n    {children}\n  </Box>\n)\n\ninterface BNBAmountLabelProps extends FlexProps {\n  amount: number\n}\n\nexport const BNBAmountLabel: React.FC<BNBAmountLabelProps> = ({ amount, ...props }) => (\n  <Flex alignItems=\"center\" {...props}>\n    <BinanceIcon width=\"16px\" mx=\"4px\" />\n    <Text fontWeight=\"600\">\n      {amount.toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 5,\n      })}\n    </Text>\n  </Flex>\n)\n\ninterface CostLabelProps extends FlexProps {\n  cost: number\n  bnbBusdPrice: Price\n}\n\nexport const CostLabel: React.FC<CostLabelProps> = ({ cost, bnbBusdPrice, ...props }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, cost)\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      {priceInUsd > 0 && (\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`($${priceInUsd.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}</Text>\n      )}\n      <BNBAmountLabel amount={cost} />\n    </Flex>\n  )\n}\n\ninterface MetaRowProps extends FlexProps {\n  title: string\n}\n\nexport const MetaRow: React.FC<MetaRowProps> = ({ title, children, ...props }) => (\n  <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" maxWidth=\"120px\" ellipsis title={title}>\n      {title}\n    </Text>\n    <Box>{children}</Box>\n  </Flex>\n)\n\nexport interface NftTagProps extends FlexProps {\n  icon?: ReactElement\n  color?: string\n}\n\nexport const NftTag: React.FC<NftTagProps> = ({ icon, color = 'text', children, ...props }) => (\n  <Flex display=\"inline-flex\" alignItems=\"center\" height=\"24px\" {...props}>\n    {icon}\n    <Text color={color} fontSize=\"14px\" fontWeight=\"600\">\n      {children}\n    </Text>\n  </Flex>\n)\n\nexport const ProfileNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<CameraIcon mr=\"4px\" width=\"16px\" color=\"textSubtle\" />} color=\"textSubtle\" {...props}>\n      {t('Profile')}\n    </NftTag>\n  )\n}\n\nexport const WalletNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<WalletFilledIcon mr=\"4px\" width=\"16px\" color=\"secondary\" />} color=\"secondary\" {...props}>\n      {t('Wallet')}\n    </NftTag>\n  )\n}\n\nexport const SellingNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<SellIcon mr=\"4px\" width=\"16px\" color=\"failure\" />} color=\"failure\" {...props}>\n      {t('Selling')}\n    </NftTag>\n  )\n}\n\nexport const StyledCollectibleCard = styled(Card)`\n  border-radius: 8px;\n  max-width: 320px;\n  transition: opacity 200ms;\n\n  & > div {\n    border-radius: 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    &:hover {\n      cursor: pointer;\n      opacity: 0.6;\n    }\n  }\n`\ninterface LowestPriceMetaRowProps {\n  lowestPrice: number\n  isFetching: boolean\n  bnbBusdPrice: Price\n}\n\nexport const LowestPriceMetaRow = ({ lowestPrice, isFetching, bnbBusdPrice }: LowestPriceMetaRowProps) => {\n  const { t } = useTranslation()\n\n  if (!isFetching && !lowestPrice) {\n    return null\n  }\n\n  return (\n    <MetaRow title={t('Lowest price')}>\n      {isFetching ? (\n        <Skeleton height=\"24px\" width=\"30px\" />\n      ) : (\n        <CostLabel cost={lowestPrice} bnbBusdPrice={bnbBusdPrice} />\n      )}\n    </MetaRow>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\nexport interface LowestNftPrice {\n  isFetching: boolean\n  lowestPrice: number\n}\n\nconst getBunnyIdFromNft = (nft: NftToken): string => {\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\n  return bunnyId ? bunnyId.toString() : null\n}\n\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (bunnyId) {\n      fetchLowestPrice()\n    }\n  }, [bunnyId])\n\n  return { isFetching, lowestPrice }\n}\n\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const isPancakeBunny = nft.collectionAddress?.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData(\n          { otherId: bunnyIdAttr, isTradable: true },\n          1,\n          'currentAskPrice',\n          'asc',\n        )\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (isPancakeBunny && nft) {\n      fetchLowestPrice()\n    }\n  }, [isPancakeBunny, nft])\n\n  return { isFetching, lowestPrice }\n}\n"],"sourceRoot":""}